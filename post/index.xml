<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on hiepph</title><link>https://hiepph.github.io/post/</link><description>Recent content in Posts on hiepph</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 11 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://hiepph.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Automate all the things</title><link>https://hiepph.github.io/post/2021-06-11-automation/</link><pubDate>Fri, 11 Jun 2021 00:00:00 +0000</pubDate><guid>https://hiepph.github.io/post/2021-06-11-automation/</guid><description>It&amp;rsquo;s been a while since my last post.
So FVI used to be a single service specific for reading ID card information. But now, it&amp;rsquo;s growing to a multi-service platform with tons of other form-constraint documents. The process is still the same. We have to duplicate it many more times in a much faster and efficient way. The problem is turning to automation.
My team and I have been pondering many more technologies outside of the machine learning world to tackle the problem.</description></item><item><title>A technical view of FVI: end-to-end Vietnamese ID card OCR</title><link>https://hiepph.github.io/post/2018-11-13-ocr/</link><pubDate>Tue, 13 Nov 2018 00:00:00 +0000</pubDate><guid>https://hiepph.github.io/post/2018-11-13-ocr/</guid><description>I’m currently working on an OCR project with some of my Vision researcher/engineer colleagues: FVI. The job is to extract pieces of information from a Vietnamese ID card.
In research progress, I wandered the internet and found some useful articles (e.g. Dropbox, Zocdoc, Facebook) about how to build an OCR system. But none of this explained clearly to me a complete intuition how to bring these research models into a production environment.</description></item><item><title>use-package for a tidy .emacs.d</title><link>https://hiepph.github.io/post/2018-11-07-use-package/</link><pubDate>Wed, 07 Nov 2018 00:00:00 +0000</pubDate><guid>https://hiepph.github.io/post/2018-11-07-use-package/</guid><description>My ~/.emacs.d configuration used to be a mess.
For example, here are 2 old configurations for IDO and sidebar neotree.
;; ### IDO ##### (require &amp;#39;ido) ;; enable IDO (ido-mode 1) (ido-everywhere 1) (ido-ubiquitous-mode 1) (setq ido-enable-flex-matching t) (setq ido-use-filename-at-point nil) (setq ido-auto-merge-work-directories-length -1) (setq ido-use-virtual-buffers t) ;; Shows a list of buffers (global-set-key (kbd &amp;#34;C-x C-b&amp;#34;) &amp;#39;ibuffer) ;; #### Neo Tree ##### (require-package &amp;#39;neotree) ;; Bind F8 to show the tree (global-set-key [f8] &amp;#39;neotree-toggle) ;; slow rendering (setq inhibit-compacting-font-caches t) ;; set icons theme (setq neo-theme (if (display-graphic-p) &amp;#39;icons &amp;#39;arrow)) ;; Every time when the neotree window is opened, let it find current file and jump to node (setq neo-smart-open t) ;; When running ‘projectile-switch-project’ (C-c p p), ‘neotree’ will change root automatically (setq projectile-switch-project-action &amp;#39;neotree-projectile-action) ;; show hidden files (setq-default neo-show-hidden-files t) Both are identical for some configurations:</description></item><item><title>Emacs + Org-mode + Syncthing = Perfect combo</title><link>https://hiepph.github.io/post/2017-11-24-emacs-org-syncthing/</link><pubDate>Fri, 24 Nov 2017 00:00:00 +0000</pubDate><guid>https://hiepph.github.io/post/2017-11-24-emacs-org-syncthing/</guid><description>Taking notes is a part of my life and work: jot down ideas, manage tasks and track personal projects. But soon came a problem, what tool is best for supporting this simple task.
There are 3 must-have features I searched for:
Markdown (or relevant) editor
Auto-sync between machines
Less but not least, affordable price
Searching journey As for me, todo note or shopping list is too trivial.</description></item><item><title>Journey of building a face generator</title><link>https://hiepph.github.io/post/2017-10-16-cgan-face-generator/</link><pubDate>Mon, 16 Oct 2017 00:00:00 +0000</pubDate><guid>https://hiepph.github.io/post/2017-10-16-cgan-face-generator/</guid><description>Github
I was impressed by Image-to-Image Demo with pix2pix (a.k.a cGAN) model (Paper). I and my friends tried to build one, everything from scratch in an AI hackathon. The idea is the machine tries to generate a real face from user&amp;rsquo;s sketch.
Collect data The ultra important job is always to get yourself a good quantity and quality dataset. This is the most-enlightened lesson I&amp;rsquo;ve ever learned in deep learning research.</description></item><item><title>Home Sweet Home</title><link>https://hiepph.github.io/post/2017-10-15-hello/</link><pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate><guid>https://hiepph.github.io/post/2017-10-15-hello/</guid><description>Out of the blue, I just want to start blogging. Just like the moment Haruki Murakami came up with the thought of writing a novel:
In that instant, for no reason and on no grounds whatsoever, the thought suddenly struck me: I think I can write a novel. Source
From now on, this will be my cozy home where I flush my thought and share little moments in life.</description></item></channel></rss>